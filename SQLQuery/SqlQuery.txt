https://docs.oracle.com/cd/E86273_01/html/Savings_Account_Creation/Savings%20Account%20Creation01_Intro.htm#Rae69675
https://www.codersarts.com/forum/database-schema/creating-bank-database-tables-using-mysql
https://docs.informatica.com/complex-event-processing/rulepoint/6-2/_banking-use-case-tutorial_rulepoint_6-2_ditamap/before-you-begin/task-1--create-database-tables/table-definition-types-in-the-banking-database.html

https://github.com/krishnakuruvadi/portfoliomanager/blob/master/src/bankaccounts/bank_account_interface.py
=======================================================================================================
https://github.com/Chandankurki/INB_NetBank.git
GitHub link
https://github.com/johnny310

NetBanking Project


<<<<<<<LoginDetails>>>>>>>

http://192.168.1.229:8080/netbankingapi/logindetails/addnew

http://192.168.1.229:8080/netbankingapi/logindetails/getall

http://192.168.1.229:8080/netbankingapi/logindetails


<<<<<<<<<Account Details>>>>>>>>>

http://192.168.1.229:8080/netbankingapi/accountdetails/addnew   

http://192.168.1.229:8080/netbankingapi/accountdetails/C1031

http://192.168.1.229:8080/netbankingapi/accountdetails/getall

http://192.168.1.229:8080/netbankingapi/deleteaccount/C1047

http://192.168.1.229:8080/netbankingapi/accountdetails/Approvedaccounts

http://192.168.1.229:8080/netbankingapi/accountdetails/pendingaccounts

http://192.168.1.229:8080/netbankingapi/accountdetail/1015894852 -->{accountId}


<<<< CUSTOMER DETAILS >>>>>>

http://192.168.1.229:8080/netbankingapi/customerdetails/getbystatus

http://192.168.1.229:8080/netbankingapi/customerdetailsbyuserid/INB1085 --UserId

http://192.168.1.229:8080/netbankingapi/customerdetails/C1027 - CustomerId

http://192.168.1.229:8080/netbankingapi/customerdetails/getall

http://192.168.1.229:8080/netbankingapi/deleteaccount/C1047  -CustomerId



<<<< TRANSACTION DETAILS >>>>>>

http://192.168.1.229:8080/netbankingapi/transactiondetails/getall

http://192.168.1.229:8080/netbankingapi/transactiondetails/1015894882-->{accountId}

http://192.168.1.229:8080/netbankingapi/transactiondetail/35413-->{transactionId}

http://192.168.1.229:8080/netbankingapi/transactiondetails/1015894882 ---> {accountId}


<<<<<<<BANK SLIP>>>>>>>>>>>>

http://192.168.1.229:8080/netbankingapi/bankslip/getall

http://192.168.1.229:8080/netbankingapi/bankslips/35400 --->CHEQUE NO

http://192.168.1.229:8080/netbankingapi/bankslip/1015894777 ---->ACC.ID


http://localhost:8080/netbankingapi/transactiondetail/transfer

 {
        "accountId": {
            "accountId": 1015895137,
            "customerDetails": null,
            "typeOfAccount": null,
            "accountStatus": null,
            "currentBalance": 0.0,
            "minimumBalance": 0.0,
            "rateOfIntrest": 0.0,
            "overDraft": 0.0,
            "openingDate": null
        },
        "accountIdTo": {
            "accountId": 1015894897,
            "customerDetails": null,
            "typeOfAccount": null,
            "accountStatus": null,
            "currentBalance": 0.0,
            "minimumBalance": 0.0,
            "rateOfIntrest": 0.0,
            "overDraft": 0.0,
            "openingDate": null
        },
        "transactionAmount": 2500.0,
        "transactionDate": "2019-08-19",
        "transactionTime": "18:20:36",
        "transactionType": "TRANSFER"
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE TABLE login_details(
user_id varchar2 (15)not null,
password varchar2(8)not null,
role varchar2(20)not null,
CONSTRAINT pk_user_id PRIMARY KEY(user_id)
);





create table customer_details(
customer_id varchar2(10)not null,
user_id varchar2(20) not null,
first_name varchar2(20) not null,
last_name varchar2(20) not null,
address_line_1 varchar2(50) not null,
address_line_2 varchar2(40),
address_line_3 varchar2(40),
city varchar2(30) not null,
state varchar2(25) not null,
zipcode number(6) not null,
landLine number(8),
mobile number(13) not null,
email varchar2(50) not null,
customer_status varchar2(15)not null,
CONSTRAINT pk_customer_id PRIMARY KEY(customer_id),
CONSTRAINT fk_user_id FOREIGN KEY(user_id) REFERENCES login_details(user_id)
);

create sequence customer_details_sequences
start with 12005
increment by 1;
INSERT INTO customer_details  (customer_id,user_id,first_name,last_name,address_line_1,address_line_2,address_line_3,city,state ,zipcode,landLine,mobile,email,customer_status )
VALUES (customer_details_sequence.NEXTVAL,'101','Nivetha','Ramakrishnan','NO 60','Thendral st','Annai Nagar','Chennai','TamilNadu','600062','2345876082','9385364346','nivekrishnan07@gmail.com','Active');

create table  account_details(
account_id number(20) not null,
customer_id VARCHAR2(15) not null,
type_of_account  varchar2(20)not null,
account_status varchar2(15)NOT NULL,
current_balance number(10,4) not null,
minimum_balance number(10,4) not null,
rate_of_interest number(10,4) not null,
overdraft number(10,4) not null,
opening_date date not null,
constraint pk_account_id primary key(account_id),
constraint fk_customer_id foreign key(customer_id) REFERENCES customer_details(customer_id)
);


create table transaction_details(
transaction_id NUMBER(15) NOT NULL,
account_id_from NUMBER(20) NOT NULL,
account_id_to NUMBER(20) NOT NULL,
transaction_amount NUMBER(10,2) NOT NULL,
transaction_date date NOT NULL,
transaction_time TIMESTAMP NOT NULL,
transaction_type varchar2(20)NOT NULL,
CONSTRAINT pk_transaction_id primary key(transaction_id),
CONSTRAINT fk_account_id_from foreign key(account_id_from) REFERENCES account_details(account_id),
CONSTRAINT fk_account_id_to foreign key(account_id_to) REFERENCES account_details(account_id)
);

CREATE TABLE bank_slip(
bank_slip_id number(10) not null,
account_id_from number(20) not null,
account_id_to NUMBER(20) NOT NULL,
cheque_no number(15) not null,
amount number(10) not null,
CONSTRAINT pk_bank_slip_id  PRIMARY KEY (bank_slip_id ),
CONSTRAINT fk_account_id_from1 foreign key (account_id_from) REFERENCES account_details(account_id),
CONSTRAINT fk_account_id_to1 foreign key (account_id_to) REFERENCES account_details(account_id)
);

('INB1074','123','Admin')*--
*-----------------------------------------------------------------------------------------------------------------------

from .models import FixedDeposit
from dateutil.relativedelta import relativedelta
from datetime import datetime, date

def add_fd_entry(number, bank_name, start_date, principal, time_period_days,
                    final_val, user, notes, goal, roi, mat_date):
    FixedDeposit.objects.create(number=number, 
                                bank_name=bank_name,
                                start_date=start_date,
                                principal=principal,
                                time_period=time_period_days,
                                final_val=final_val,
                                user=user,
                                notes=notes,
                                goal=goal,
                                roi=roi,
                                mat_date=mat_date)

def get_maturity_value(principal, start_date, roi, time_period_days, compound_frequency=4):
    '''
    start_date should either be a date object or of format "%Y-%m-%d"
    '''
    if not isinstance(start_date, date):
        start_date = datetime.strptime(start_date, "%Y-%m-%d").date()
    maturity_date = start_date+relativedelta(days=time_period_days)
    #maturity_value = principal*(1+(roi/(100*compound_frequency))**(compound_frequency*float(time_period_days/365)))
    maturity_value = compound_interest_quarterly(principal, roi, float(time_period_days/365))

    '''
    p = float(input('Please enter principal amount:'))
    t = float(input('Please enter number of years:'))
    r = float(input('Please enter rate of interest:'))
    n = float(input('Please enter number of times the interest is compounded in a year:'))
    a = p*(1+(r/(100*n))**(n*t))
    '''
    print('Amount compounded to: ', maturity_value)
    return maturity_date.strftime("%Y-%m-%d"), int(maturity_value)

def compound_interest_quarterly(principal, roi, time):
    result = principal * (pow((1 + roi / (100*4)), time*4))
    return result


def get_maturity_value_on_date(principal, start_date, roi, maturity_date, compound_frequency=4):
    '''
    start_date should either be a date object or of format "%Y-%m-%d"
    '''
    if not isinstance(start_date, date):
        start_date = datetime.strptime(start_date, "%Y-%m-%d").date()
    if not isinstance(maturity_date, date):
        maturity_date = datetime.strptime(maturity_date, "%Y-%m-%d").date()
    time_period_days = (maturity_date-start_date).days
    #maturity_value = principal*(1+(roi/(100*compound_frequency))**(compound_frequency*float(time_period_days/365)))
    maturity_value = compound_interest_quarterly(principal, roi, float(time_period_days/365))

    '''
    p = float(input('Please enter principal amount:'))
    t = float(input('Please enter number of years:'))
    r = float(input('Please enter rate of interest:'))
    n = float(input('Please enter number of times the interest is compounded in a year:'))
    a = p*(1+(r/(100*n))**(n*t))
    '''
    print('Amount compounded to: ', maturity_value)
    return int(maturity_value)






